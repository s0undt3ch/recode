[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "codemod"
version = "0.1.0"
description = "Automatic Python Code Rewrite Tool"
authors = [
    "Pedro Algarvio <pedro@algarvio.me>"
]
license = "Apache-2.0"
readme = "README.md"
packages = [
  {include = "codemod", from = "src" }
]

[tool.poetry.scripts]
"codemod" = "codemod.__main__:main"

[tool.poetry.dependencies]
python = ">3.11,<4"
libcst = "^1.5.0"
sqlfluff = "^3.2.5"
pydantic = "^2.9.2"
tomllib = {version = ">=1.1.0", python = "<3.11"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
attrs = "^24.2.0"
pytest-clarity = "^1.0.1"

[tool.poetry.plugins."codemod"]
format-sql = "codemod.mods.sql.fmt:FormatSQL"

build-backend = "poetry.masonry.api"

[tool.ruff]
line-length = 120
show-fixes = true
target-version = "py311"
respect-gitignore = true
src = [
  "src",
  "tests",
  "tools",
]
extend-exclude = [
  ".nox/**",
  "tests/**/files/*.py"
]
extend-include = [
  "setup.py",
  "noxfile.py",
  "src/**/*.pyi",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # D* pydocstyle
  "ANN",     # Don't complain about annotations
  "ARG001",  # Unused function argument
  "COM",     # flake8-commas - Black takes care of this
  "D103",    # Missing docstring in public function
  "D200",    # Reformat to one line
  "D212",    # Remove whitespace after opening quotes
  "ERA",     # eradicate
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FIX002",  # Line contains TODO, consider resolving the issue"
  "PERF203", # `try`-`except` within a loop incurs performance overhead"
  "PERF401", # Use a list comprehension to create a transformed list
  "PERF402", # Use `list` or `list.copy` to create a copy of a list
  "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable"
  "PTH",     # Stop complaining about switching to pathlib
  "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value
  "RUF005",  # Consider iterable unpacking instead of concatenation
  "SIM108",  # Use ternary operator `A = X if Y else Z` instead of `if`-`else`-block
  "SIM110",  # Use `return any( ... etc ...)` instead of `for` loop
  "TCH003",  # Move standard library import `pathlib.Path` into a type-checking block
  "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`"
  "TD003",   # Missing issue link on the line following this TODO
  "UP038",   # Use `X | Y` in `isinstance` call instead of `(X, Y)` - SLOWER CODE
]

[tool.ruff.lint.per-file-ignores]
"src/**/*.py" = [
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
]
"src/**/*.pyi" = [
  "D100",   # Missing docstring in public module
]
"src/codemod/__main__.py" = [
  "PLR0913", # Too many arguments in function definition
]
"src/codemod/mods/*.py" = [
  "ARG002", #  Unused method argument
  "D100",   # Missing docstring in public module
  "D101",   # Missing docstring in public class
  "D102",   # Missing docstring in public method
  "N802",   # Function name `leave_Xyz` should be lowercase
]
"src/codemod/testing.py" = [
  "D101",   # Missing docstring in public class
  "D105",   # Missing docstring in magic method
  "S101",   # Use of `assert` detected
]
"tools/**/*.py" = [
  "ANN201",   # Missing return type annotation for public function"
  "D104",     # Missing docstring in public package
  "FBT001",   # Boolean positional arg in function definition
  "FBT002",   # Boolean default value in function definition
]
"tests/conftest.py" = [
  "SIM115",   # Use a context manager for opening files
]
"tests/**/*.py" = [
  "ANN",      # Ignore missing type annotations in tests
  "ARG001",   # Unused function argument
  "D",        # Don't complain about any docstrings in tests
  "PLR2004",  # Magic value used in comparison, consider replacing <number> with a constant variable
  "PT001",    # use @pytest.fixture() over @pytest.fixture
  "PT023",    # use @pytest.mark.<blah>() over @pytest.mark.<blah>
  "S101",     # Ignore the use of 'assert ...' in tests
  "SIM117",   # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "SLF001",   # Private member accessed
  "TCH002",   # Move third-party import into a type-checking block
  "TCH003",   # Move standard library import `pathlib` into a type-checking block
]
"tests/**/files/*" = [
  "INP001",   # implicit namespace packages
]
[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = false
force-single-line = true
known-first-party = ["src"]
forced-separate = ["tests"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pep8-naming]
ignore-names = [
  "__virtual__",
]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.pylint]
max-branches = 25

[tool.mypy]
python_version = "3.11"
disable_error_code = "import-untyped"
mypy_path = "src"
exclude = [
  "tests/.*/files/.*\\.py",
  "^tests/([^/]*/)*files/.*"
]
